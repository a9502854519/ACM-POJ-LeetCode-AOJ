多組查詢，首先得考慮的是，如何快速找出simple path？
這不礙事，用LCA即可快速求出simple path。
再來是如果找出最大利潤。這裡利用二分搜尋版本的LCA來
計算，首先，以LCA為中心，將路徑分成左半邊和右半邊。
最大利潤的可能情形有以下幾種：
1. 出現在左半邊的路徑上
2. 出現在右半邊的路徑上
3. 在左半邊的路徑上買進，在右半邊的路徑上賣出。
根據以上的概念，我們定義出四個表：
1. up_profit[k][v]：從點v往上走2^k步，可獲得的最大利潤
2. down_profit[k][v] 從點v往上走2^k，可獲得的最小利潤(反過來講，即為往下走的最大利潤)
3. max_w[k][v]：從點v往上走2^k步，經過的點中，最高的商品價格。
4. min_w[k][v]：從點v往上走2^k步，經過的點中，最低的商品價格。

up_profit的遞推式為：up_profit[k+1][v] = max(max(up_profit[k][v], up_profit[k][parent[k][v]]), max_w[k][parent[k][v]] - min_w[k][v])
其它三者同理可推。
接著考慮二分時的計算
1. 從u開始往上走2^k步時 (1)根據up_profit[k][u]更新最佳解。
                        (2)根據max_w[k][u] - (目前左半邊的最低價格)更新最佳解。
                        (3)根據min_w[k][u]更新左半邊的最低價格。
2. 從v開始往上走2^k步時 (1)根據down_profit[k][v]更新最佳解。
                        (2)根據(目前右半邊的最高價格) - min_w[k][v]更新最佳解。
                        (3)根據max_w[k][v]更新右半邊的最高價格。
接著再把lca的價錢納入計算，取最佳。
			            
